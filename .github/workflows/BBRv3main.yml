name: Build and Release Kernel BBRv3

on:
  #push:
    #branches:
      #- main
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP12-A15"
  BRANCH: "android14-6.1"

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for submodules

      - name: Free Disk Space & Update APT
        run: |
          set -euxo pipefail
          sudo apt-get update -qq && sudo apt-get install -qq curl
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash
      - name: Setup Build Environment
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build file bc bison flex libssl-dev libelf-dev wget \
            build-essential python3-dev python3-setuptools rsync ccache dwarves
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}
      - name: Setup Python and Repo Tool
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p "$HOME/bin"
          wget -O "$HOME/bin/repo" https://storage.googleapis.com/git-repo-downloads/repo
          chmod a+x "$HOME/bin/repo"
          echo "$HOME/bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      - name: Configure Build Directory
        id: build_dir
        run: |
          set -euxo pipefail
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y-%m-%d-%I-%M-%p')-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          BUILD_DIR="builds/${ROOT_DIR}"
          echo "BUILD_DIR=${BUILD_DIR}" >> $GITHUB_ENV
          mkdir -p "${BUILD_DIR}"
          echo "Build directory set to ${BUILD_DIR}"
      - name: Clone Required Repositories
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          git clone --recursive https://github.com/TheWildJames/AnyKernel3.git -b gki
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1
          git clone https://github.com/cabagekiller/kernel_patches.git
      - name: Setup Kernel Source
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          KERNEL_DIR="kernel_platform/oneplus12_v"
          echo "KERNEL_DIR=${KERNEL_DIR}" >> $GITHUB_ENV
          mkdir -p "${KERNEL_DIR}"
          cd "${KERNEL_DIR}"
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus12_v.xml --depth=1
          sync_attempts=3
          for i in $(seq 1 $sync_attempts); do
              repo sync -c -j"$(nproc)" --force-sync --no-clone-bundle --no-tags
              if [ $? -eq 0 ]; then break; fi
              echo "Repo sync failed. Attempt $i of $sync_attempts"
              if [ $i -lt $sync_attempts ]; then sleep 60; fi
          done
          [ $? -ne 0 ] && { echo "Repo sync failed after multiple attempts."; exit 1; }
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*
      - name: Setup KernelSU (Submodule Integration)
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next-susfs-dev
          git submodule update --init --recursive
          cd KernelSU-Next/kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
      - name: Setup SUSFS
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          SUSFS_PATCHES="../../../susfs4ksu/kernel_patches"
          KERNEL_PATCHES="../../../kernel_patches"
          KSU_NEXT="KernelSU-Next"
          mkdir -p ./common/fs ./common/include/linux
          cp "${SUSFS_PATCHES}/fs/"* ./common/fs/
          cp "${SUSFS_PATCHES}/include/linux/"* ./common/include/linux/
          #cp "${SUSFS_PATCHES}/KernelSU/10_enable_susfs_for_ksu.patch" "${KSU_NEXT}/"
          cp "${SUSFS_PATCHES}/50_add_susfs_in_gki-android14-6.1.patch" ./common/
          cp "${KERNEL_PATCHES}/69_hide_stuff.patch" ./common/
          cp "${KERNEL_PATCHES}/next/syscall_hooks.patch" ./common/
          cp "${KERNEL_PATCHES}/bbrv3_full.patch" ./common/
          #cp "${KERNEL_PATCHES}/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch" "${KSU_NEXT}/"
          cd "${KSU_NEXT}"
          #patch -p1 --forward < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || echo "Warning: KernelSU SUSFS patch may have been already applied or failed."
          cd ../common
          patch -p1 -F 3 < bbrv3_full.patch || true
          patch -p1 --forward < syscall_hooks.patch || echo "Warning: KernelSU SUSFS patch may have been already applied or failed."
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch || echo "Warning: SUSFS patch may have been already applied."
          patch -p1 -F 3 < 69_hide_stuff.patch || echo "Warning: 69_hide_stuff patch may have been already applied."
           
          #sed -i '/obj-$(CONFIG_KSU_SUSFS_SUS_SU) += sus_su.o/d' ./fs/Makefile
          git diff --quiet --exit-code || (git add -A && git commit -m "BUILD Kernel (SUSFS setup)" || true)
          cd ..
          git diff --quiet --exit-code || (git add -A && git commit -m "BUILD Kernel (SUSFS setup)" || true)
          git rm --cached KernelSU-Next || true
      - name: Configure Kernel
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
           # Add SUSFS configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_COMPAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add additional tmpfs config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Enable BBR and Set as Default 
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_DEFAULT_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo 'CONFIG_DEFAULT_TCP_CONG="bbr"' >> ./common/arch/arm64/configs/gki_defconfig 

          # Optional: Keep Reno/Cubic as alternatives 
          echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_RENO=y" >> ./common/arch/arm64/configs/gki_defconfig 
          # Disable Unnecessary TCP Congestion Algorithms 
          echo "# CONFIG_TCP_CONG_BIC is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_WESTWOOD is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_HTCP is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_HSTCP is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_HYBLA is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_VEGAS is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_NV is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_SCALABLE is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_LP is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_VENO is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_YEAH is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_ILLINOIS is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_DCTCP is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_TCP_CONG_CDG is not set" >> ./common/arch/arm64/configs/gki_defconfig 

          # Disable Other Default Congestion Controls 
          echo "# CONFIG_DEFAULT_BIC is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_DEFAULT_HTCP is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_DEFAULT_WESTWOOD is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_DEFAULT_RENO is not set" >> ./common/arch/arm64/configs/gki_defconfig 

          # Enable FQ-CoDel for Queue Management 
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig 

          # Disable Other Queuing Disciplines 
          echo "# CONFIG_NET_SCH_NETEM is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_NET_SCH_CBS is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_NET_SCH_DEFAULT is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_NET_SCH_HTB is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_NET_SCH_HFSC is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_NET_SCH_PRIO is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_NET_SCH_RED is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_NET_SCH_SFQ is not set" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "# CONFIG_NET_SCH_TBF is not set" >> ./common/arch/arm64/configs/gki_defconfig
          # Remove defconfig check
          sed -i '2s/check_defconfig//' ./common/build.config.gki
      - name: ♻️ Restore missing Linux kernel headers for BBRv3 integration
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          echo "📥 Cloning upstream Linux kernel source..."
          git clone --depth=1 https://github.com/torvalds/linux.git upstream-linux
      
          echo "🧩 Copying missing headers to kernel source..."
          declare -a headers=(
            "include/net/netns/mib.h"
            "include/net/netns/conntrack.h"
            "include/net/netns/ipv4.h"
            "include/net/netns/ipv6.h"
            "include/net/netns/nexthop.h"
          )
      
          for header in "${headers[@]}"; do
            if [[ -f "upstream-linux/$header" ]]; then
              target_dir="common/$(dirname "$header")"
              mkdir -p "$target_dir"
              cp "upstream-linux/$header" "$target_dir"
              echo "✅ Copied: $header → $target_dir"
            else
              echo "⚠️  Missing in upstream: $header (skipped)"
            fi
          done
          # Copy all files recursively from upstream-linux/include/linux to common/include/linux
          echo "📂 Copying all headers from upstream Linux include/linux..."
          cp -r upstream-linux/include/linux/* common/include/linux/
          echo "✅ Copied all headers from upstream Linux include/linux"
          # Copy uapi headers from upstream-linux/include/uapi/linux to common/include/uapi/linux
          echo "📂 Copying all uapi headers from upstream Linux include/uapi/linux..."
          cp -r upstream-linux/include/uapi/linux/* common/include/uapi/linux/
          echo "✅ Copied all uapi headers from upstream Linux include/uapi/linux"
          mkdir -p common/include/net/netns
          cp upstream-linux/include/net/netns/mib.h common/include/net/netns/mib.h
          echo "🧹 Cleaning up..."
          rm -rf upstream-linux
          echo "🎉 Header restoration complete!"
      - name: ♻️ Restore kernel/pgo from Android common kernel
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          echo "📥 Cloning Android kernel common tree (android14-6.1)..."
          git clone --depth=1 --branch android14-6.1 https://android.googlesource.com/kernel/common android-kernel
      
          echo "📂 Copying kernel/pgo..."
          if [ -d android-kernel/kernel/pgo ]; then
            mkdir -p common/kernel/pgo
            cp -r android-kernel/kernel/pgo/* common/kernel/pgo/
            echo "✅ kernel/pgo restored successfully."
          else
            echo "⚠️  kernel/pgo not found in android14-6.1 — skipping copy."
          fi
      
          echo "🧹 Cleaning up..."
          rm -rf android-kernel
      - name: ⚙️ Integrate BBRv3 into kernel source
        shell: bash
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
            set -euxo pipefail
        
            echo "📥 Cloning Google BBRv3 source..."
            git clone --depth=1 --branch v3 https://github.com/google/bbr bbrv3
        
            echo "📁 Preparing BBRv3 file list..."
            declare -A file_map=(
              [bbrv3/bbr/net/ipv4/tcp_bbr.c]=common/net/ipv4/tcp_bbr.c
              [bbrv3/bbr/include/uapi/linux/tcp_bbr.h]=common/include/uapi/linux/tcp_bbr.h
              [bbrv3/bbr/include/linux/tcp_bbr2_plus.h]=common/include/linux/tcp_bbr2_plus.h
              [bbrv3/bbr/include/net/tcp_bbr2_plus_impl.h]=common/include/net/tcp_bbr2_plus_impl.h
              [bbrv3/bbr/include/net/tcp_bbr2_plus_common.h]=common/include/net/tcp_bbr2_plus_common.h
              [bbrv3/bbr/include/net/tcp_bbr2_plus_bw_probe.h]=common/include/net/tcp_bbr2_plus_bw_probe.h
              [bbrv3/bbr/include/net/tcp_bbr2_plus_minrtt.h]=common/include/net/tcp_bbr2_plus_minrtt.h
              [bbrv3/bbr/include/net/tcp_bbr2_plus_model.h]=common/include/net/tcp_bbr2_plus_model.h
              [bbrv3/bbr/include/net/tcp_bbr2_plus_probe_rtt.h]=common/include/net/tcp_bbr2_plus_probe_rtt.h
            )
        
            echo "🔁 Copying BBRv3 files into kernel source..."
            for src in "${!file_map[@]}"; do
              dst=${file_map[$src]}
              if [[ -f "$src" ]]; then
                mkdir -p "$(dirname "$dst")"
                cp "$src" "$dst"
                echo "✅ Copied: $src → $dst"
              else
                echo "⚠️  Skipped missing: $src"
              fi
            done
        
            echo "🛠️ Patching Makefile..."
            MAKEFILE_PATH="common/net/ipv4/Makefile"
            if ! grep -q "tcp_bbr.o" "$MAKEFILE_PATH"; then
              echo "obj-\$(CONFIG_TCP_CONG_BBR3) += tcp_bbr.o" >> "$MAKEFILE_PATH"
              echo "✅ Added tcp_bbr.o to $MAKEFILE_PATH"
            else
              echo "ℹ️ tcp_bbr.o already in Makefile."
            fi
        
            echo "🧩 Updating defconfig..."
            DEFCONFIG_PATH="common/arch/arm64/configs/gki_defconfig"
            if ! grep -q "CONFIG_TCP_CONG_BBR3" "$DEFCONFIG_PATH"; then
              echo "CONFIG_TCP_CONG_BBR3=y" >> "$DEFCONFIG_PATH"
              echo "✅ Enabled CONFIG_TCP_CONG_BBR3"
            else
              echo "ℹ️ CONFIG_TCP_CONG_BBR3 already enabled."
            fi
        
            echo "🎉 BBRv3 integration completed!"

      - name: Clone upstream Linux kernel (for missing headers)
        run: |
          git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git upstream-linux
      - name: Restore missing netns/mib.h from upstream
        run: |
          echo "[*] Restoring netns/mib.h if needed..."
          TARGET_HEADER_PATH="common/include/net/netns/mib.h"
          if [ ! -f "$TARGET_HEADER_PATH" ]; then
            echo "[-] mib.h not found. Copying from upstream..."
            mkdir -p "$(dirname "$TARGET_HEADER_PATH")"
            cp upstream-linux/include/net/netns/mib.h "$TARGET_HEADER_PATH"
          else
            echo "[+] mib.h already exists at $TARGET_HEADER_PATH"
          fi
  
          # Also ensure Bazel can see it in the execroot
          EXECROOT=$(find out/bazel/output_user_root -type d -name 'execroot' | head -n 1)
          if [ -n "$EXECROOT" ]; then
            echo "[*] Copying mib.h to Bazel execroot..."
            mkdir -p "$EXECROOT/__main__/common/include/net/netns"
            cp "$TARGET_HEADER_PATH" "$EXECROOT/__main__/common/include/net/netns/mib.h"
          fi
      - name: 🩹 Patch Makefile to avoid creating bad symlink
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform/common
        run: |
          echo "🔧 Replacing 'ln -fsn' with conditional safe version"
          sed -i 's|ln -fsn.*source|test "$(realpath source 2>/dev/null)" != "$(realpath .)" \&\& ln -fsn $(srctree) source|' Makefile
          echo "✅ Makefile patch complete"

      - name: 🧹 Clean source & patch CONFIG_FUNCTION_ALIGNMENT
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail

          echo "📦 Generating config from defconfig"
          make -C common O=out ARCH=arm64 ${DEFCONFIG:-defconfig}
          
          # 🧹 Remove symlink to avoid Bazel infinite loop
          rm -f common/out/source
          
          # Locate actual config file path
          CONFIG_PATH=$(find common -name ".config" | head -n1)
          echo "🔍 Located config at $CONFIG_PATH"
          
          echo "🛠 Disabling CONFIG_PGO_CLANG manually to avoid missing kernel/pgo/"
          sed -i '/^CONFIG_PGO_CLANG/d' "$CONFIG_PATH" || true
          echo "CONFIG_PGO_CLANG=n" >> "$CONFIG_PATH"
          
          echo "🛠 Checking for CONFIG_FUNCTION_ALIGNMENT in $CONFIG_PATH"
          if grep -q "^CONFIG_FUNCTION_ALIGNMENT=" "$CONFIG_PATH"; then
            echo "✅ Already set"
          else
            echo "🔧 Adding CONFIG_FUNCTION_ALIGNMENT=0"
            echo "CONFIG_FUNCTION_ALIGNMENT=0" >> "$CONFIG_PATH"
          fi
          
          echo "📦 Finalizing config with olddefconfig"
          make -C common O=out ARCH=arm64 olddefconfig
      - name: 🧩 Patch Kleaf to prevent source- symlink
        working-directory: ${{ env.BUILD_DIR }}/kernel_platform/oneplus12_v/kernel_platform
        run: |
          echo "🔧 Disabling out/source- symlink to prevent infinite loop"
          sed -i 's/ctx\.actions\.symlink/# ctx.actions.symlink/' build/kernel/kleaf/impl/kernel_env.bzl
      - name: 🔧 Patch kernel build system (remove symlink & disable kernel_toolchain_info)
        working-directory: ${{ env.BUILD_DIR }}/kernel_platform/oneplus12_v/kernel_platform
        run: |
          echo "🧹 Removing problematic symlink: common/out/source-"
          rm -f common/out/source-
      
          if [ -f WORKSPACE ]; then
            echo "🛠 Disabling kernel_toolchain_info local_repository in WORKSPACE"
            sed -i '/local_repository.*kernel_toolchain_info/,/)/ s/^/# 🔒 disabled: /' WORKSPACE
          else
            echo "⚠️ No WORKSPACE file found to patch."
          fi

      - name: Build Kernel
        working-directory: ${{ env.BUILD_DIR }}/${{ env.KERNEL_DIR }}/kernel_platform
        run: |
          set -euxo pipefail
          ls -l common/include/net/netns/mib.h
          echo "🔍 Verifying copied header:"
          find common/include/net/netns/ -name "mib.h"
          mkdir -p out
          start_time=$(date +%s)
          export PATH="/usr/lib/ccache:$PATH"
           # 🧹 Kill symlink loop before Bazel sees it
          #find common/out -type l -lname '../' -name source -exec rm -f {} +
          #echo "🛡️ Blocking recreation with dummy file"
          #touch common/out/source
          #chmod 000 common/out/source
          #echo "🧼 Cleaning Bazel cache"
          ./tools/bazel clean --expunge
          ./build_with_bazel.py \
          -t pineapple gki \
          --jobs="$(nproc --all)" \
          --verbose_failures \
          --sandbox_debug \
          --subcommands \
          --config=stamp \
          --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
          --ignore_missing_projects \
          -o "$(pwd)/out"
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "Kernel build time: $build_time seconds"
      - name: Auto-retry Bazel build with header restoration
        run: |
          set -e
          UPSTREAM_DIR=upstream-linux/include
          DEST_ROOT=common/include
          MAX_RETRIES=5
          LOG_FILE=build.log
      
          restore_headers() {
            echo "📄 Scanning for missing headers..."
            grep -oP "fatal error: '\K[^']+(?=')" "$LOG_FILE" | sort -u > missing_headers.txt
      
            if [[ ! -s missing_headers.txt ]]; then
              echo "✅ No missing headers found."
              return 1
            fi
      
            echo "📂 Restoring headers from $UPSTREAM_DIR..."
            while read -r HEADER; do
              SRC="$UPSTREAM_DIR/$HEADER"
              DEST="$DEST_ROOT/$HEADER"
              DEST_DIR=$(dirname "$DEST")
      
              echo "→ $HEADER"
              if [ -f "$SRC" ]; then
                mkdir -p "$DEST_DIR"
                cp "$SRC" "$DEST"
                echo "✓ Restored $HEADER"
              else
                echo "⚠️ Header not found: $SRC"
              fi
            done < missing_headers.txt
            return 0
          }
      
          run_build() {
            echo "⚙️ Running Bazel build..."
            ./build_with_bazel.py \
              -t pineapple gki \
              --jobs="$(nproc --all)" --verbose_failures --config=stamp \
              --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
              --ignore_missing_projects -o "$(pwd)/out" &> "$LOG_FILE"
          }
      
          echo "🚀 Starting auto-build with header patching..."
          for i in $(seq 1 $MAX_RETRIES); do
            echo "🔁 Attempt $i/$MAX_RETRIES"
            if run_build; then
              echo "🎉 Build succeeded on attempt $i!"
              exit 0
            fi
      
            echo "❌ Build failed. Checking for missing headers..."
            if ! restore_headers; then
              echo "🧼 No headers to restore. Exiting loop."
              break
            fi
            echo "♻️ Retrying build..."
          done
      
          echo "❗ Build failed after $MAX_RETRIES attempts."
          exit 1

      - name: Create ZIP Package
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          mkdir -p AnyKernel3
          touch AnyKernel3/Image
          cp kernel_platform/oneplus12_v/kernel_platform/out/dist/Image AnyKernel3/Image || { echo "Error copying Image file"; exit 1; }
          cd AnyKernel3
          ZIP_NAME="Cabage-OP12-SUSFS-$(date +'%Y-%m-%d-%H-%M-%S').zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          ls -lh "../$ZIP_NAME"
          echo "zip_name=$ZIP_NAME" >> $GITHUB_ENV
      - name: Set current timestamp
        id: timestamp
        run: echo "CURRENT_TIMESTAMP=$(date -u +'%Y.%m.%d-%H%M%S')" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.BUILD_DIR }}/${{ env.zip_name }}
          tag_name: release-${{ env.CURRENT_TIMESTAMP }} # Simple, safe tag
          name: Release ${{ env.ROOT_DIR_PREFIX }} ${{ env.zip_name }}
          body: |
             Release for ${{ env.ROOT_DIR_PREFIX }} based on branch ${{ env.BRANCH }}
             KSU Version: ${{ env.KSUVER }}  # Still *include* KSUVER in the body
             Timestamp: ${{ env.CURRENT_TIMESTAMP }}
      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        if: ${{ always() && failure() }}
        with:
          name: build-logs
          path: |
            ${{ env.BUILD_DIR }}/kernel_platform/oneplus12_v/kernel_platform/out/*.log
            ${{ env.BUILD_DIR }}/kernel_platform/oneplus12_v/kernel_platform/**/*.rej
          retention-days: 5
          if-no-files-found: error
